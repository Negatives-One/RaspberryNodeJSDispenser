* 1° - é preciso instalar o  NodeJS
* 2° - execute as seguintes instruções no terminal

mkdir ServoApp              (pode ser qualquer nome, esse comando vai criar uma pasta) // isso n precisa fazer pq eu já criei a pasta
cd ServoApp                 (muda para o diretório da Pasta criada)

npm init                    (esse comando irá iniciar o npm no diretório do projeto e instalar o connect e o express)
npm install express --save
npm install connect --save
npm install socket.io --save

* 3° - é necessário instalar o Pi-Blaster pois ele vai ajudar a gerar modulações por largura de pulso (PWM)

cd
git clone https://github.com/sarfata/pi-blaster.git
cd pi-blaster

*obs: Ao usar o Pi-Blaster, serão criados 8 pinos de PWM automaticamente (isso nos pinos GPIO 4, 17, 18, 21, 22, 
23, 24 25). Logo, não será possível atribuir nenhuma outra função para esses pinos que não seja PWM. Será
necessário, então, alterar o código fonte do arquivo que foi para o raspberry.


* No arquivo pi-blaster.c, perto da linha 50 do código, estará a seguinte lista 

// Created new known_pins with raspberry pi list of pins 
// to compare against the param received. 
static uint8_t known_pins[] = { 
4, // P1-7 
17, // P1-11 
18, // P1-12 
27, // P1-13 
21, // P1-13 
22, // P1-15 
23, // P1-16 
24, // P1-18 
25, // P1-22 
};

* 4° - A parte do código que foi mostrada acima é responsável por definir o pinos a serem usados como PWM, então,
é necessário mudá-la para configurar apenas os pinos que serão usados no projeto como PWM. No caso, será o pino 22.

// Created new known_pins with raspberry pi list of pins 
// to compare against the param received. 
static uint8_t known_pins[] = {  
22, // P1-15 
};

* 5° - Após modificar o código fonte, será necessário compilar e instalar. Siga as seguintes instruções:

cd
sudo apt-get install autoconf
cd pi-blaster
./autogen.sh
./configure
make
sudo make install;

* 6° - Para checar se o arquivo foi instalado correntamente, execute o seguinte comando:

echo "22=0.1" > /dev/pi-blaster

* O comando acima irá atribuir o valor 0.1 ao pino 22, o que significa um duty cycle de 10%. 

*OBS!!!!!!!!!: Depois disso, o pino GPIO 22 servirá apenas para PWM, não será possível atribuir nenhuma outra
função a ele. Então, caso queira desinstalar o pi-blaster após a execução do projeto, vá ao diretório onde ele
foi instalado e execute o seguinte comando:

sudo make uninstall

Com isso, o pi-blaster não será iniciado automaticamente depois.

* 7° - Agora será necessário instalar o pacote do pi-blaster para o NodeJS. Execute o seguinte comando no
diretório do projeto. (No nosso caso, o diretório que eu criei: ServoApp)

npm install pi-blaster.js --save
